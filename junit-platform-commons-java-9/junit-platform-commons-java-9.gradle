apply plugin: 'org.junit.platform.gradle.plugin'

dependencies {
	// This is project we are extending.
	implementation(project(':junit-platform-commons'))

	// Needed for testing.
	testImplementation(project(':junit-platform-launcher'))
	testImplementation(project(':junit-jupiter-api'))
	testImplementation(project(':junit-jupiter-engine'))
	testImplementation("junit:junit:${junit4Version}")

	// Include junit-platform-console so that the JUnit Gradle plugin
	// uses the local version of the ConsoleLauncher.
	testRuntimeOnly(project(path: ':junit-platform-console', configuration: 'shadow'))
	testRuntimeOnly(project(':junit-vintage-engine'))
}

// Compiles against the public, supported and documented Java 9 API.
javacRelease = 9

// https://github.com/schauder/degraph/issues/87
degraph.enabled = false

// Exclude "integration" package from default "class-path based" test run.
// Tests in the "integration" package assume to be run on the module-path.
junitPlatform {
	filters {
		packages {
			exclude 'integration'
		}
	}
}

// Create "junit-commons-integration-tests.jar" archive which will be later
// mounted as an automatic jar into the integration test module-path.
task generateIntegrationTestsJar(type: Jar, dependsOn: compileTestJava) {
	archiveName 'junit-commons-integration-tests.jar'
	from compileTestJava.destinationDir
	include("integration/**/*")
}

// Copy runtime dependencies to a single directory.
task generateDependenciesDirectory(type: Copy) {
	into "$buildDir/deps"
	from configurations.testRuntimeClasspath
}

// Execute console launcher on the module-path.
task execScanModulepath(type: Exec, dependsOn: [generateDependenciesDirectory, generateIntegrationTestsJar]) {
	executable = 'java'
	args = [
			'--module-path', files(
					generateDependenciesDirectory.destinationDir,
					generateIntegrationTestsJar.archivePath
				).asPath,
			'--add-modules', 'ALL-MODULE-PATH,ALL-DEFAULT',
			'--module', 'org.junit.platform.console',
			'--scan-modules'
	]
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

// Execute console launcher on the module-path w/o "java.scripting"
task execNoJavaScripting(type: Exec, dependsOn: [generateDependenciesDirectory, generateIntegrationTestsJar]) {
	executable = 'java'
	args = [
			'--show-module-resolution',
			'--module-path', files(
					generateDependenciesDirectory.destinationDir,
					generateIntegrationTestsJar.archivePath
				).asPath,
			'--add-modules', 'junit.commons.integration.tests',
			'--module', 'org.junit.platform.console',
			'--scan-modules'
	]
}

task testScanModulepath(dependsOn: execScanModulepath) {
	doLast {
		String text = execScanModulepath.errorOutput.toString() + execScanModulepath.standardOutput.toString()
		// tree node names
		assert text.contains("JUnit Vintage")
		assert text.contains("integration.VintageIntegrationTest")
		assert text.contains("successfulTest")
		assert text.contains("JUnit Jupiter")
		assert text.contains("JupiterIntegrationTests")
		assert text.contains("version()")
		assert text.contains("moduleIsNamed()")
		assert text.contains("packageName()")
		assert text.contains("javaScriptingModuleIsAvailable()")
		// summary
		assert text.contains("Test run finished after")
		// container summary
		assert text.contains("4 containers found")
		assert text.contains("0 containers skipped")
		assert text.contains("4 containers started")
		assert text.contains("0 containers aborted")
		assert text.contains("4 containers successful")
		assert text.contains("0 containers failed")
		// tests summary
		assert text.contains("6 tests found")
		assert text.contains("0 tests skipped")
		assert text.contains("6 tests started")
		assert text.contains("0 tests aborted")
		assert text.contains("6 tests successful")
		assert text.contains("0 tests failed")
	}
}

test.dependsOn testScanModulepath
